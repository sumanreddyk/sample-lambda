AWSTemplateFormatVersion: "2010-09-09"
Parameters:
Resources:
  NginxSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Nginx Server Security Group - Allow SSH access from your IP range
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref YourIPRange
          Description: SSH from your IP
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP to Internet
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: SSH to Anywhere
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP to Internet
  CloudWatchAgentRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: "AllowSecretsManagerRead"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:Create*
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - s3:GetObject
                Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*"
  CloudWatchServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref "CloudWatchAgentRole"
  NginxServer:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              python3: 3.6
              python3-pip: []
              nginx: []
              mysql: []
              mysql-server: []
              mysql-devel: []
              mysql-libs: []
          sources:
            "/var/www/html": http://ftp.drupal.org/files/projects/drupal-7.8.tar.gz
            "/home/ec2-user": http://ftp.drupal.org/files/projects/drush-7.x-4.5.tar.gz
          files:
            "/tmp/setup.mysql":
              content:
                Fn::Join:
                - ''
                - - 'CREATE DATABASE '
                  - "drupaldb"
                  - ";\n"
                  - CREATE USER '
                  - "admin"
                  - "'@'localhost' IDENTIFIED BY '"
                  - "admin"
                  - "';\n"
                  - 'GRANT ALL ON '
                  - "drupaldb"
                  - ".* TO '"
                  - "admin"
                  - "'@'localhost';\n"
                  - 'FLUSH PRIVILEGES;

                    '
              mode: '000644'
              owner: root
              group: root
            "/opt/helloworld.py":
              owner: root
              group: root
              mode: 755
              source: !Join ["", ["https://", !Ref S3BucketName, ".s3.", "amazonaws.com/hello-world-flask.py"]]
              authentification: "role"
            "/etc/systemd/system/helloworld.service":
              owner: root
              group: root
              mode: 755
              content: |
                [Unit]
                Description=HelloWorld service
                After=network.target
                [Service]
                Type=simple
                User=root
                ExecStart=/opt/helloworld.py
                Restart=on-abort
                [Install]
                WantedBy=multi-user.target
          commands:
            installflask:
              # This commands runs installation
              command: "pip3 install flask"
              # This commands runs BEFORE command above
              # and checks if pip3 is present on system
              # if return code is not 0 cfn-init stops
              test: "which pip3"
            installnginx:
              command: "sudo yum install epel-release && sudo yum update && sudo yum install nginx -y"
              test: "sudo nginx -v"
            reloadsystemd:
              command: "systemctl daemon-reload"
          services:
            sysvinit:
              python3:
                enabled: "true"
                ensureRunning: "true"
              mysqld:
                enabled: 'true'
                ensureRunning: 'true'
      AWS::CloudFormation::Authentication:
        role:
          type: "S3"
          buckets:
            - !Ref S3BucketName
          roleName: !Ref AppRole
    Properties:
      ImageId: !Ref LinuxAMI
      KeyName: !Ref KeyPair
      InstanceType: t2.micro
      IamInstanceProfile: !Ref CloudWatchServerInstanceProfile
      Tags:
        - Key: "Name"
          Value: "NginxServer"
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet:
            - !Ref "NginxSecurityGroup"
          SubnetId: !Ref "PublicSubnet"

  AppRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "sts:AssumeRole"
            Principal:
              Service: "ec2.amazonaws.com"
      Policies:
        - PolicyName: S3
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "s3:*"
                Resource: "*"

  AppInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref AppRole
  
  WebServerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7

  4xxMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName:
        !Ref WebServerLogGroup
      FilterPattern: "[ip, identity, user_id, timestamp, request, status_code = 4*, size, ...]"
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: test/4xxs
          MetricName: test4xxCount

  UnauthorizedApiMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: '{ ($.errorCode = "*UnauthorizedOperation") || ($.errorCode = "AccessDenied*") }'
      LogGroupName: !Ref WebServerLogGroup
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: test/error
          MetricName: UnauthorizedApiCallsMetric

  BytesTransferredMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName:
        !Ref WebServerLogGroup
      FilterPattern: "[ip, identity, user_id, timestamp, request, status_code, size, ...]"
      MetricTransformations:
        - MetricValue: "$size"
          MetricNamespace: test/BytesTransferred
          MetricName: testBytesTransferred

  4xxAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: The number of 4xxs is greater than 10 over a configurable time frame in minutes
      MetricName: test4xxCount
      Namespace: test/4xxs
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 10
      AlarmActions:
        - !Ref AlarmNotificationTopic
      ComparisonOperator: GreaterThanThreshold

  AlarmNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: CloudwatchMetricsAlaram
      Subscription:
        - Endpoint: "kamireddy777@gmail.com"
          Protocol: email
      Tags:
        - Key: name
          Value: WeserverMetrics

  UnauthorizedApiAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: True
      AlarmActions:
        - !Ref AlarmNotificationTopic
      AlarmDescription: Alarms on unauthorized API calls - CIS Benchmark 3.1
      AlarmName: UnauthorizedApiCallsAlarm
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: UnauthorizedApiCallsMetric
      Namespace: test/error
      Period: 300
      Statistic: Sum
      Threshold: 20
      TreatMissingData: missing
